/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package edu.ucla.macroscope.emotiongraph.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import edu.ucla.macroscope.emotiongraph.model.JobDocument;
import edu.ucla.macroscope.emotiongraph.model.JobDocumentModel;
import edu.ucla.macroscope.emotiongraph.model.JobDocumentSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the JobDocument service. Represents a row in the &quot;EmotionGraph_JobDocument&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link edu.ucla.macroscope.emotiongraph.model.JobDocumentModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link JobDocumentImpl}.
 * </p>
 *
 * @author dave
 * @see JobDocumentImpl
 * @see edu.ucla.macroscope.emotiongraph.model.JobDocument
 * @see edu.ucla.macroscope.emotiongraph.model.JobDocumentModel
 * @generated
 */
@JSON(strict = true)
public class JobDocumentModelImpl extends BaseModelImpl<JobDocument>
	implements JobDocumentModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a job document model instance should use the {@link edu.ucla.macroscope.emotiongraph.model.JobDocument} interface instead.
	 */
	public static final String TABLE_NAME = "EmotionGraph_JobDocument";
	public static final Object[][] TABLE_COLUMNS = {
			{ "jobDocumentId", Types.BIGINT },
			{ "jobId", Types.BIGINT },
			{ "documentId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table EmotionGraph_JobDocument (jobDocumentId LONG not null primary key,jobId LONG,documentId LONG,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table EmotionGraph_JobDocument";
	public static final String ORDER_BY_JPQL = " ORDER BY jobDocument.jobDocumentId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY EmotionGraph_JobDocument.jobDocumentId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.edu.ucla.macroscope.emotiongraph.model.JobDocument"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.edu.ucla.macroscope.emotiongraph.model.JobDocument"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static JobDocument toModel(JobDocumentSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		JobDocument model = new JobDocumentImpl();

		model.setJobDocumentId(soapModel.getJobDocumentId());
		model.setJobId(soapModel.getJobId());
		model.setDocumentId(soapModel.getDocumentId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<JobDocument> toModels(JobDocumentSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<JobDocument> models = new ArrayList<JobDocument>(soapModels.length);

		for (JobDocumentSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.edu.ucla.macroscope.emotiongraph.model.JobDocument"));

	public JobDocumentModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _jobDocumentId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setJobDocumentId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _jobDocumentId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return JobDocument.class;
	}

	@Override
	public String getModelClassName() {
		return JobDocument.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("jobDocumentId", getJobDocumentId());
		attributes.put("jobId", getJobId());
		attributes.put("documentId", getDocumentId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long jobDocumentId = (Long)attributes.get("jobDocumentId");

		if (jobDocumentId != null) {
			setJobDocumentId(jobDocumentId);
		}

		Long jobId = (Long)attributes.get("jobId");

		if (jobId != null) {
			setJobId(jobId);
		}

		Long documentId = (Long)attributes.get("documentId");

		if (documentId != null) {
			setDocumentId(documentId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}
	}

	@JSON
	@Override
	public long getJobDocumentId() {
		return _jobDocumentId;
	}

	@Override
	public void setJobDocumentId(long jobDocumentId) {
		_jobDocumentId = jobDocumentId;
	}

	@JSON
	@Override
	public long getJobId() {
		return _jobId;
	}

	@Override
	public void setJobId(long jobId) {
		_jobId = jobId;
	}

	@JSON
	@Override
	public long getDocumentId() {
		return _documentId;
	}

	@Override
	public void setDocumentId(long documentId) {
		_documentId = documentId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			JobDocument.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public JobDocument toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (JobDocument)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		JobDocumentImpl jobDocumentImpl = new JobDocumentImpl();

		jobDocumentImpl.setJobDocumentId(getJobDocumentId());
		jobDocumentImpl.setJobId(getJobId());
		jobDocumentImpl.setDocumentId(getDocumentId());
		jobDocumentImpl.setGroupId(getGroupId());
		jobDocumentImpl.setCompanyId(getCompanyId());
		jobDocumentImpl.setUserId(getUserId());
		jobDocumentImpl.setUserName(getUserName());
		jobDocumentImpl.setCreateDate(getCreateDate());
		jobDocumentImpl.setModifiedDate(getModifiedDate());

		jobDocumentImpl.resetOriginalValues();

		return jobDocumentImpl;
	}

	@Override
	public int compareTo(JobDocument jobDocument) {
		long primaryKey = jobDocument.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof JobDocument)) {
			return false;
		}

		JobDocument jobDocument = (JobDocument)obj;

		long primaryKey = jobDocument.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<JobDocument> toCacheModel() {
		JobDocumentCacheModel jobDocumentCacheModel = new JobDocumentCacheModel();

		jobDocumentCacheModel.jobDocumentId = getJobDocumentId();

		jobDocumentCacheModel.jobId = getJobId();

		jobDocumentCacheModel.documentId = getDocumentId();

		jobDocumentCacheModel.groupId = getGroupId();

		jobDocumentCacheModel.companyId = getCompanyId();

		jobDocumentCacheModel.userId = getUserId();

		jobDocumentCacheModel.userName = getUserName();

		String userName = jobDocumentCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			jobDocumentCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			jobDocumentCacheModel.createDate = createDate.getTime();
		}
		else {
			jobDocumentCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			jobDocumentCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			jobDocumentCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return jobDocumentCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{jobDocumentId=");
		sb.append(getJobDocumentId());
		sb.append(", jobId=");
		sb.append(getJobId());
		sb.append(", documentId=");
		sb.append(getDocumentId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("edu.ucla.macroscope.emotiongraph.model.JobDocument");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>jobDocumentId</column-name><column-value><![CDATA[");
		sb.append(getJobDocumentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>jobId</column-name><column-value><![CDATA[");
		sb.append(getJobId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentId</column-name><column-value><![CDATA[");
		sb.append(getDocumentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = JobDocument.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			JobDocument.class
		};
	private long _jobDocumentId;
	private long _jobId;
	private long _documentId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private JobDocument _escapedModel;
}