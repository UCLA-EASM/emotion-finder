/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package edu.ucla.macroscope.emotiongraph.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import edu.ucla.macroscope.emotiongraph.model.Dictionary;
import edu.ucla.macroscope.emotiongraph.model.DictionaryContentsBlobModel;
import edu.ucla.macroscope.emotiongraph.model.DictionaryModel;
import edu.ucla.macroscope.emotiongraph.model.DictionarySoap;
import edu.ucla.macroscope.emotiongraph.service.DictionaryLocalServiceUtil;

import java.io.Serializable;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Dictionary service. Represents a row in the &quot;EmotionGraph_Dictionary&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link edu.ucla.macroscope.emotiongraph.model.DictionaryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DictionaryImpl}.
 * </p>
 *
 * @author dave
 * @see DictionaryImpl
 * @see edu.ucla.macroscope.emotiongraph.model.Dictionary
 * @see edu.ucla.macroscope.emotiongraph.model.DictionaryModel
 * @generated
 */
@JSON(strict = true)
public class DictionaryModelImpl extends BaseModelImpl<Dictionary>
	implements DictionaryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dictionary model instance should use the {@link edu.ucla.macroscope.emotiongraph.model.Dictionary} interface instead.
	 */
	public static final String TABLE_NAME = "EmotionGraph_Dictionary";
	public static final Object[][] TABLE_COLUMNS = {
			{ "dictionaryId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "language", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "contents", Types.BLOB },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table EmotionGraph_Dictionary (dictionaryId LONG not null primary key,name VARCHAR(75) null,language VARCHAR(75) null,description VARCHAR(75) null,contents BLOB,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table EmotionGraph_Dictionary";
	public static final String ORDER_BY_JPQL = " ORDER BY dictionary.dictionaryId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY EmotionGraph_Dictionary.dictionaryId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.edu.ucla.macroscope.emotiongraph.model.Dictionary"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.edu.ucla.macroscope.emotiongraph.model.Dictionary"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Dictionary toModel(DictionarySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Dictionary model = new DictionaryImpl();

		model.setDictionaryId(soapModel.getDictionaryId());
		model.setName(soapModel.getName());
		model.setLanguage(soapModel.getLanguage());
		model.setDescription(soapModel.getDescription());
		model.setContents(soapModel.getContents());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Dictionary> toModels(DictionarySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Dictionary> models = new ArrayList<Dictionary>(soapModels.length);

		for (DictionarySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.edu.ucla.macroscope.emotiongraph.model.Dictionary"));

	public DictionaryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _dictionaryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDictionaryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _dictionaryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Dictionary.class;
	}

	@Override
	public String getModelClassName() {
		return Dictionary.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("dictionaryId", getDictionaryId());
		attributes.put("name", getName());
		attributes.put("language", getLanguage());
		attributes.put("description", getDescription());
		attributes.put("contents", getContents());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long dictionaryId = (Long)attributes.get("dictionaryId");

		if (dictionaryId != null) {
			setDictionaryId(dictionaryId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String language = (String)attributes.get("language");

		if (language != null) {
			setLanguage(language);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		Blob contents = (Blob)attributes.get("contents");

		if (contents != null) {
			setContents(contents);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}
	}

	@JSON
	@Override
	public long getDictionaryId() {
		return _dictionaryId;
	}

	@Override
	public void setDictionaryId(long dictionaryId) {
		_dictionaryId = dictionaryId;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@JSON
	@Override
	public String getLanguage() {
		if (_language == null) {
			return StringPool.BLANK;
		}
		else {
			return _language;
		}
	}

	@Override
	public void setLanguage(String language) {
		_language = language;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public Blob getContents() {
		if (_contentsBlobModel == null) {
			try {
				_contentsBlobModel = DictionaryLocalServiceUtil.getContentsBlobModel(getPrimaryKey());
			}
			catch (Exception e) {
			}
		}

		Blob blob = null;

		if (_contentsBlobModel != null) {
			blob = _contentsBlobModel.getContentsBlob();
		}

		return blob;
	}

	@Override
	public void setContents(Blob contents) {
		if (_contentsBlobModel == null) {
			_contentsBlobModel = new DictionaryContentsBlobModel(getPrimaryKey(),
					contents);
		}
		else {
			_contentsBlobModel.setContentsBlob(contents);
		}
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Dictionary.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Dictionary toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Dictionary)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DictionaryImpl dictionaryImpl = new DictionaryImpl();

		dictionaryImpl.setDictionaryId(getDictionaryId());
		dictionaryImpl.setName(getName());
		dictionaryImpl.setLanguage(getLanguage());
		dictionaryImpl.setDescription(getDescription());
		dictionaryImpl.setGroupId(getGroupId());
		dictionaryImpl.setCompanyId(getCompanyId());
		dictionaryImpl.setUserId(getUserId());
		dictionaryImpl.setUserName(getUserName());
		dictionaryImpl.setCreateDate(getCreateDate());
		dictionaryImpl.setModifiedDate(getModifiedDate());

		dictionaryImpl.resetOriginalValues();

		return dictionaryImpl;
	}

	@Override
	public int compareTo(Dictionary dictionary) {
		long primaryKey = dictionary.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Dictionary)) {
			return false;
		}

		Dictionary dictionary = (Dictionary)obj;

		long primaryKey = dictionary.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		DictionaryModelImpl dictionaryModelImpl = this;

		dictionaryModelImpl._contentsBlobModel = null;
	}

	@Override
	public CacheModel<Dictionary> toCacheModel() {
		DictionaryCacheModel dictionaryCacheModel = new DictionaryCacheModel();

		dictionaryCacheModel.dictionaryId = getDictionaryId();

		dictionaryCacheModel.name = getName();

		String name = dictionaryCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			dictionaryCacheModel.name = null;
		}

		dictionaryCacheModel.language = getLanguage();

		String language = dictionaryCacheModel.language;

		if ((language != null) && (language.length() == 0)) {
			dictionaryCacheModel.language = null;
		}

		dictionaryCacheModel.description = getDescription();

		String description = dictionaryCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			dictionaryCacheModel.description = null;
		}

		dictionaryCacheModel.groupId = getGroupId();

		dictionaryCacheModel.companyId = getCompanyId();

		dictionaryCacheModel.userId = getUserId();

		dictionaryCacheModel.userName = getUserName();

		String userName = dictionaryCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			dictionaryCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			dictionaryCacheModel.createDate = createDate.getTime();
		}
		else {
			dictionaryCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			dictionaryCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			dictionaryCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return dictionaryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{dictionaryId=");
		sb.append(getDictionaryId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", language=");
		sb.append(getLanguage());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("edu.ucla.macroscope.emotiongraph.model.Dictionary");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>dictionaryId</column-name><column-value><![CDATA[");
		sb.append(getDictionaryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>language</column-name><column-value><![CDATA[");
		sb.append(getLanguage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Dictionary.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Dictionary.class
		};
	private long _dictionaryId;
	private String _name;
	private String _language;
	private String _description;
	private DictionaryContentsBlobModel _contentsBlobModel;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private Dictionary _escapedModel;
}