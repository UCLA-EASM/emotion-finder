/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package edu.ucla.macroscope.emotiongraph.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import edu.ucla.macroscope.emotiongraph.model.JobDocumentResult;
import edu.ucla.macroscope.emotiongraph.model.JobDocumentResultModel;
import edu.ucla.macroscope.emotiongraph.model.JobDocumentResultSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the JobDocumentResult service. Represents a row in the &quot;EmotionGraph_JobDocumentResult&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link edu.ucla.macroscope.emotiongraph.model.JobDocumentResultModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link JobDocumentResultImpl}.
 * </p>
 *
 * @author dave
 * @see JobDocumentResultImpl
 * @see edu.ucla.macroscope.emotiongraph.model.JobDocumentResult
 * @see edu.ucla.macroscope.emotiongraph.model.JobDocumentResultModel
 * @generated
 */
@JSON(strict = true)
public class JobDocumentResultModelImpl extends BaseModelImpl<JobDocumentResult>
	implements JobDocumentResultModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a job document result model instance should use the {@link edu.ucla.macroscope.emotiongraph.model.JobDocumentResult} interface instead.
	 */
	public static final String TABLE_NAME = "EmotionGraph_JobDocumentResult";
	public static final Object[][] TABLE_COLUMNS = {
			{ "jobDocumentResultId", Types.BIGINT },
			{ "jobId", Types.BIGINT },
			{ "documentId", Types.BIGINT },
			{ "lineNo", Types.BIGINT },
			{ "word", Types.VARCHAR },
			{ "count", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table EmotionGraph_JobDocumentResult (jobDocumentResultId LONG not null primary key,jobId LONG,documentId LONG,lineNo LONG,word VARCHAR(75) null,count LONG,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table EmotionGraph_JobDocumentResult";
	public static final String ORDER_BY_JPQL = " ORDER BY jobDocumentResult.jobDocumentResultId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY EmotionGraph_JobDocumentResult.jobDocumentResultId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.edu.ucla.macroscope.emotiongraph.model.JobDocumentResult"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.edu.ucla.macroscope.emotiongraph.model.JobDocumentResult"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static JobDocumentResult toModel(JobDocumentResultSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		JobDocumentResult model = new JobDocumentResultImpl();

		model.setJobDocumentResultId(soapModel.getJobDocumentResultId());
		model.setJobId(soapModel.getJobId());
		model.setDocumentId(soapModel.getDocumentId());
		model.setLineNo(soapModel.getLineNo());
		model.setWord(soapModel.getWord());
		model.setCount(soapModel.getCount());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<JobDocumentResult> toModels(
		JobDocumentResultSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<JobDocumentResult> models = new ArrayList<JobDocumentResult>(soapModels.length);

		for (JobDocumentResultSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.edu.ucla.macroscope.emotiongraph.model.JobDocumentResult"));

	public JobDocumentResultModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _jobDocumentResultId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setJobDocumentResultId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _jobDocumentResultId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return JobDocumentResult.class;
	}

	@Override
	public String getModelClassName() {
		return JobDocumentResult.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("jobDocumentResultId", getJobDocumentResultId());
		attributes.put("jobId", getJobId());
		attributes.put("documentId", getDocumentId());
		attributes.put("lineNo", getLineNo());
		attributes.put("word", getWord());
		attributes.put("count", getCount());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long jobDocumentResultId = (Long)attributes.get("jobDocumentResultId");

		if (jobDocumentResultId != null) {
			setJobDocumentResultId(jobDocumentResultId);
		}

		Long jobId = (Long)attributes.get("jobId");

		if (jobId != null) {
			setJobId(jobId);
		}

		Long documentId = (Long)attributes.get("documentId");

		if (documentId != null) {
			setDocumentId(documentId);
		}

		Long lineNo = (Long)attributes.get("lineNo");

		if (lineNo != null) {
			setLineNo(lineNo);
		}

		String word = (String)attributes.get("word");

		if (word != null) {
			setWord(word);
		}

		Long count = (Long)attributes.get("count");

		if (count != null) {
			setCount(count);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}
	}

	@JSON
	@Override
	public long getJobDocumentResultId() {
		return _jobDocumentResultId;
	}

	@Override
	public void setJobDocumentResultId(long jobDocumentResultId) {
		_jobDocumentResultId = jobDocumentResultId;
	}

	@JSON
	@Override
	public long getJobId() {
		return _jobId;
	}

	@Override
	public void setJobId(long jobId) {
		_jobId = jobId;
	}

	@JSON
	@Override
	public long getDocumentId() {
		return _documentId;
	}

	@Override
	public void setDocumentId(long documentId) {
		_documentId = documentId;
	}

	@JSON
	@Override
	public long getLineNo() {
		return _lineNo;
	}

	@Override
	public void setLineNo(long lineNo) {
		_lineNo = lineNo;
	}

	@JSON
	@Override
	public String getWord() {
		if (_word == null) {
			return StringPool.BLANK;
		}
		else {
			return _word;
		}
	}

	@Override
	public void setWord(String word) {
		_word = word;
	}

	@JSON
	@Override
	public long getCount() {
		return _count;
	}

	@Override
	public void setCount(long count) {
		_count = count;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			JobDocumentResult.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public JobDocumentResult toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (JobDocumentResult)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		JobDocumentResultImpl jobDocumentResultImpl = new JobDocumentResultImpl();

		jobDocumentResultImpl.setJobDocumentResultId(getJobDocumentResultId());
		jobDocumentResultImpl.setJobId(getJobId());
		jobDocumentResultImpl.setDocumentId(getDocumentId());
		jobDocumentResultImpl.setLineNo(getLineNo());
		jobDocumentResultImpl.setWord(getWord());
		jobDocumentResultImpl.setCount(getCount());
		jobDocumentResultImpl.setGroupId(getGroupId());
		jobDocumentResultImpl.setCompanyId(getCompanyId());
		jobDocumentResultImpl.setUserId(getUserId());
		jobDocumentResultImpl.setUserName(getUserName());
		jobDocumentResultImpl.setCreateDate(getCreateDate());
		jobDocumentResultImpl.setModifiedDate(getModifiedDate());

		jobDocumentResultImpl.resetOriginalValues();

		return jobDocumentResultImpl;
	}

	@Override
	public int compareTo(JobDocumentResult jobDocumentResult) {
		long primaryKey = jobDocumentResult.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof JobDocumentResult)) {
			return false;
		}

		JobDocumentResult jobDocumentResult = (JobDocumentResult)obj;

		long primaryKey = jobDocumentResult.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<JobDocumentResult> toCacheModel() {
		JobDocumentResultCacheModel jobDocumentResultCacheModel = new JobDocumentResultCacheModel();

		jobDocumentResultCacheModel.jobDocumentResultId = getJobDocumentResultId();

		jobDocumentResultCacheModel.jobId = getJobId();

		jobDocumentResultCacheModel.documentId = getDocumentId();

		jobDocumentResultCacheModel.lineNo = getLineNo();

		jobDocumentResultCacheModel.word = getWord();

		String word = jobDocumentResultCacheModel.word;

		if ((word != null) && (word.length() == 0)) {
			jobDocumentResultCacheModel.word = null;
		}

		jobDocumentResultCacheModel.count = getCount();

		jobDocumentResultCacheModel.groupId = getGroupId();

		jobDocumentResultCacheModel.companyId = getCompanyId();

		jobDocumentResultCacheModel.userId = getUserId();

		jobDocumentResultCacheModel.userName = getUserName();

		String userName = jobDocumentResultCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			jobDocumentResultCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			jobDocumentResultCacheModel.createDate = createDate.getTime();
		}
		else {
			jobDocumentResultCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			jobDocumentResultCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			jobDocumentResultCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return jobDocumentResultCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{jobDocumentResultId=");
		sb.append(getJobDocumentResultId());
		sb.append(", jobId=");
		sb.append(getJobId());
		sb.append(", documentId=");
		sb.append(getDocumentId());
		sb.append(", lineNo=");
		sb.append(getLineNo());
		sb.append(", word=");
		sb.append(getWord());
		sb.append(", count=");
		sb.append(getCount());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("edu.ucla.macroscope.emotiongraph.model.JobDocumentResult");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>jobDocumentResultId</column-name><column-value><![CDATA[");
		sb.append(getJobDocumentResultId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>jobId</column-name><column-value><![CDATA[");
		sb.append(getJobId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentId</column-name><column-value><![CDATA[");
		sb.append(getDocumentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lineNo</column-name><column-value><![CDATA[");
		sb.append(getLineNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>word</column-name><column-value><![CDATA[");
		sb.append(getWord());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>count</column-name><column-value><![CDATA[");
		sb.append(getCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = JobDocumentResult.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			JobDocumentResult.class
		};
	private long _jobDocumentResultId;
	private long _jobId;
	private long _documentId;
	private long _lineNo;
	private String _word;
	private long _count;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private JobDocumentResult _escapedModel;
}