/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package edu.ucla.macroscope.emotiongraph.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.service.BaseServiceImpl;
import com.liferay.portal.service.persistence.UserPersistence;

import edu.ucla.macroscope.emotiongraph.model.Dictionary;
import edu.ucla.macroscope.emotiongraph.service.DictionaryService;
import edu.ucla.macroscope.emotiongraph.service.persistence.DictionaryPersistence;
import edu.ucla.macroscope.emotiongraph.service.persistence.JobDocumentPersistence;
import edu.ucla.macroscope.emotiongraph.service.persistence.JobDocumentResultPersistence;
import edu.ucla.macroscope.emotiongraph.service.persistence.JobPersistence;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the dictionary remote service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link edu.ucla.macroscope.emotiongraph.service.impl.DictionaryServiceImpl}.
 * </p>
 *
 * @author dave
 * @see edu.ucla.macroscope.emotiongraph.service.impl.DictionaryServiceImpl
 * @see edu.ucla.macroscope.emotiongraph.service.DictionaryServiceUtil
 * @generated
 */
public abstract class DictionaryServiceBaseImpl extends BaseServiceImpl
	implements DictionaryService, IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link edu.ucla.macroscope.emotiongraph.service.DictionaryServiceUtil} to access the dictionary remote service.
	 */

	/**
	 * Returns the dictionary local service.
	 *
	 * @return the dictionary local service
	 */
	public edu.ucla.macroscope.emotiongraph.service.DictionaryLocalService getDictionaryLocalService() {
		return dictionaryLocalService;
	}

	/**
	 * Sets the dictionary local service.
	 *
	 * @param dictionaryLocalService the dictionary local service
	 */
	public void setDictionaryLocalService(
		edu.ucla.macroscope.emotiongraph.service.DictionaryLocalService dictionaryLocalService) {
		this.dictionaryLocalService = dictionaryLocalService;
	}

	/**
	 * Returns the dictionary remote service.
	 *
	 * @return the dictionary remote service
	 */
	public edu.ucla.macroscope.emotiongraph.service.DictionaryService getDictionaryService() {
		return dictionaryService;
	}

	/**
	 * Sets the dictionary remote service.
	 *
	 * @param dictionaryService the dictionary remote service
	 */
	public void setDictionaryService(
		edu.ucla.macroscope.emotiongraph.service.DictionaryService dictionaryService) {
		this.dictionaryService = dictionaryService;
	}

	/**
	 * Returns the dictionary persistence.
	 *
	 * @return the dictionary persistence
	 */
	public DictionaryPersistence getDictionaryPersistence() {
		return dictionaryPersistence;
	}

	/**
	 * Sets the dictionary persistence.
	 *
	 * @param dictionaryPersistence the dictionary persistence
	 */
	public void setDictionaryPersistence(
		DictionaryPersistence dictionaryPersistence) {
		this.dictionaryPersistence = dictionaryPersistence;
	}

	/**
	 * Returns the job local service.
	 *
	 * @return the job local service
	 */
	public edu.ucla.macroscope.emotiongraph.service.JobLocalService getJobLocalService() {
		return jobLocalService;
	}

	/**
	 * Sets the job local service.
	 *
	 * @param jobLocalService the job local service
	 */
	public void setJobLocalService(
		edu.ucla.macroscope.emotiongraph.service.JobLocalService jobLocalService) {
		this.jobLocalService = jobLocalService;
	}

	/**
	 * Returns the job remote service.
	 *
	 * @return the job remote service
	 */
	public edu.ucla.macroscope.emotiongraph.service.JobService getJobService() {
		return jobService;
	}

	/**
	 * Sets the job remote service.
	 *
	 * @param jobService the job remote service
	 */
	public void setJobService(
		edu.ucla.macroscope.emotiongraph.service.JobService jobService) {
		this.jobService = jobService;
	}

	/**
	 * Returns the job persistence.
	 *
	 * @return the job persistence
	 */
	public JobPersistence getJobPersistence() {
		return jobPersistence;
	}

	/**
	 * Sets the job persistence.
	 *
	 * @param jobPersistence the job persistence
	 */
	public void setJobPersistence(JobPersistence jobPersistence) {
		this.jobPersistence = jobPersistence;
	}

	/**
	 * Returns the job document local service.
	 *
	 * @return the job document local service
	 */
	public edu.ucla.macroscope.emotiongraph.service.JobDocumentLocalService getJobDocumentLocalService() {
		return jobDocumentLocalService;
	}

	/**
	 * Sets the job document local service.
	 *
	 * @param jobDocumentLocalService the job document local service
	 */
	public void setJobDocumentLocalService(
		edu.ucla.macroscope.emotiongraph.service.JobDocumentLocalService jobDocumentLocalService) {
		this.jobDocumentLocalService = jobDocumentLocalService;
	}

	/**
	 * Returns the job document remote service.
	 *
	 * @return the job document remote service
	 */
	public edu.ucla.macroscope.emotiongraph.service.JobDocumentService getJobDocumentService() {
		return jobDocumentService;
	}

	/**
	 * Sets the job document remote service.
	 *
	 * @param jobDocumentService the job document remote service
	 */
	public void setJobDocumentService(
		edu.ucla.macroscope.emotiongraph.service.JobDocumentService jobDocumentService) {
		this.jobDocumentService = jobDocumentService;
	}

	/**
	 * Returns the job document persistence.
	 *
	 * @return the job document persistence
	 */
	public JobDocumentPersistence getJobDocumentPersistence() {
		return jobDocumentPersistence;
	}

	/**
	 * Sets the job document persistence.
	 *
	 * @param jobDocumentPersistence the job document persistence
	 */
	public void setJobDocumentPersistence(
		JobDocumentPersistence jobDocumentPersistence) {
		this.jobDocumentPersistence = jobDocumentPersistence;
	}

	/**
	 * Returns the job document result local service.
	 *
	 * @return the job document result local service
	 */
	public edu.ucla.macroscope.emotiongraph.service.JobDocumentResultLocalService getJobDocumentResultLocalService() {
		return jobDocumentResultLocalService;
	}

	/**
	 * Sets the job document result local service.
	 *
	 * @param jobDocumentResultLocalService the job document result local service
	 */
	public void setJobDocumentResultLocalService(
		edu.ucla.macroscope.emotiongraph.service.JobDocumentResultLocalService jobDocumentResultLocalService) {
		this.jobDocumentResultLocalService = jobDocumentResultLocalService;
	}

	/**
	 * Returns the job document result remote service.
	 *
	 * @return the job document result remote service
	 */
	public edu.ucla.macroscope.emotiongraph.service.JobDocumentResultService getJobDocumentResultService() {
		return jobDocumentResultService;
	}

	/**
	 * Sets the job document result remote service.
	 *
	 * @param jobDocumentResultService the job document result remote service
	 */
	public void setJobDocumentResultService(
		edu.ucla.macroscope.emotiongraph.service.JobDocumentResultService jobDocumentResultService) {
		this.jobDocumentResultService = jobDocumentResultService;
	}

	/**
	 * Returns the job document result persistence.
	 *
	 * @return the job document result persistence
	 */
	public JobDocumentResultPersistence getJobDocumentResultPersistence() {
		return jobDocumentResultPersistence;
	}

	/**
	 * Sets the job document result persistence.
	 *
	 * @param jobDocumentResultPersistence the job document result persistence
	 */
	public void setJobDocumentResultPersistence(
		JobDocumentResultPersistence jobDocumentResultPersistence) {
		this.jobDocumentResultPersistence = jobDocumentResultPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();
	}

	public void destroy() {
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return Dictionary.class;
	}

	protected String getModelClassName() {
		return Dictionary.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = dictionaryPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = edu.ucla.macroscope.emotiongraph.service.DictionaryLocalService.class)
	protected edu.ucla.macroscope.emotiongraph.service.DictionaryLocalService dictionaryLocalService;
	@BeanReference(type = edu.ucla.macroscope.emotiongraph.service.DictionaryService.class)
	protected edu.ucla.macroscope.emotiongraph.service.DictionaryService dictionaryService;
	@BeanReference(type = DictionaryPersistence.class)
	protected DictionaryPersistence dictionaryPersistence;
	@BeanReference(type = edu.ucla.macroscope.emotiongraph.service.JobLocalService.class)
	protected edu.ucla.macroscope.emotiongraph.service.JobLocalService jobLocalService;
	@BeanReference(type = edu.ucla.macroscope.emotiongraph.service.JobService.class)
	protected edu.ucla.macroscope.emotiongraph.service.JobService jobService;
	@BeanReference(type = JobPersistence.class)
	protected JobPersistence jobPersistence;
	@BeanReference(type = edu.ucla.macroscope.emotiongraph.service.JobDocumentLocalService.class)
	protected edu.ucla.macroscope.emotiongraph.service.JobDocumentLocalService jobDocumentLocalService;
	@BeanReference(type = edu.ucla.macroscope.emotiongraph.service.JobDocumentService.class)
	protected edu.ucla.macroscope.emotiongraph.service.JobDocumentService jobDocumentService;
	@BeanReference(type = JobDocumentPersistence.class)
	protected JobDocumentPersistence jobDocumentPersistence;
	@BeanReference(type = edu.ucla.macroscope.emotiongraph.service.JobDocumentResultLocalService.class)
	protected edu.ucla.macroscope.emotiongraph.service.JobDocumentResultLocalService jobDocumentResultLocalService;
	@BeanReference(type = edu.ucla.macroscope.emotiongraph.service.JobDocumentResultService.class)
	protected edu.ucla.macroscope.emotiongraph.service.JobDocumentResultService jobDocumentResultService;
	@BeanReference(type = JobDocumentResultPersistence.class)
	protected JobDocumentResultPersistence jobDocumentResultPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private DictionaryServiceClpInvoker _clpInvoker = new DictionaryServiceClpInvoker();
}